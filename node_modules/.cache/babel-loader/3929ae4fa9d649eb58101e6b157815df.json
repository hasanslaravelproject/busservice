{"ast":null,"code":"import api from \"../api/axios\";\nimport jwt_decode from \"jwt-decode\"; // Set all future requests to use the token.\n\nconst setToken = () => {\n  const token = localStorage.getItem(\"token\");\n\n  if (token) {\n    api.interceptors.request.use(async config => {\n      config.headers = {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n        useCredentials: true\n      };\n      return config;\n    }, error => {\n      Promise.reject(error);\n    });\n  }\n}; // Get new Token by API CALL.\n\n\nconst tokenAPICALL = async (user, pass) => {\n  const {\n    data\n  } = await api.post(`/login`, {\n    username: user,\n    password: pass\n  }, {\n    headers: {\n      \"Content-Type\": \"application/json; charset=UTF-8\"\n    }\n  });\n  const jwt_Token_decoded = jwt_decode(data.data.access_token);\n  const expiryDate = jwt_Token_decoded.exp;\n\n  if (jwt_Token_decoded.exp * 1000 > Date.now()) {\n    localStorage.setItem(\"token\", data.data.access_token);\n    localStorage.setItem(\"token_exp\", expiryDate);\n  } else {\n    console.log(\"failed token\");\n  }\n\n  return data.data.access_token;\n}; // Check the Token stored in Cookies.\n\n\nconst getToken = async (user, pass) => {\n  const storedJwt = localStorage.getItem(\"token\");\n  const expiration = localStorage.getItem(\"token_exp\");\n\n  if (expiration && storedJwt) {\n    if (expiration * 1000 > Date.now()) {\n      console.log(\"Keep Token\");\n      setToken();\n    } else {\n      console.log(\"Expired Token\");\n      return await tokenAPICALL(user, pass);\n    }\n  } else {\n    // No token recorder in session, Get new token\n    console.log(\"No Token\");\n    return await tokenAPICALL(user, pass);\n  }\n};\n\nexport default getToken;","map":{"version":3,"sources":["C:/xampp/htdocs/projectbus/ReactApp/src/auth/auth.js"],"names":["api","jwt_decode","setToken","token","localStorage","getItem","interceptors","request","use","config","headers","Authorization","useCredentials","error","Promise","reject","tokenAPICALL","user","pass","data","post","username","password","jwt_Token_decoded","access_token","expiryDate","exp","Date","now","setItem","console","log","getToken","storedJwt","expiration"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CACA;;AACA,MAAMC,QAAQ,GAAG,MAAM;AACrB,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,MAAIF,KAAJ,EAAW;AACTH,IAAAA,GAAG,CAACM,YAAJ,CAAiBC,OAAjB,CAAyBC,GAAzB,CACE,MAAOC,MAAP,IAAkB;AAChBA,MAAAA,MAAM,CAACC,OAAP,GAAiB;AACfC,QAAAA,aAAa,EAAG,UAASR,KAAM,EADhB;AAEf,wBAAgB,kBAFD;AAGfS,QAAAA,cAAc,EAAE;AAHD,OAAjB;AAKA,aAAOH,MAAP;AACD,KARH,EASGI,KAAD,IAAW;AACTC,MAAAA,OAAO,CAACC,MAAR,CAAeF,KAAf;AACD,KAXH;AAaD;AACF,CAjBD,C,CAmBA;;;AACA,MAAMG,YAAY,GAAG,OAAOC,IAAP,EAAaC,IAAb,KAAsB;AACzC,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMnB,GAAG,CAACoB,IAAJ,CACpB,QADoB,EAErB;AACEC,IAAAA,QAAQ,EAAEJ,IADZ;AAEEK,IAAAA,QAAQ,EAAEJ;AAFZ,GAFqB,EAMrB;AACER,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADX,GANqB,CAAvB;AAYA,QAAMa,iBAAiB,GAAGtB,UAAU,CAACkB,IAAI,CAACA,IAAL,CAAUK,YAAX,CAApC;AAEA,QAAMC,UAAU,GAAGF,iBAAiB,CAACG,GAArC;;AACA,MAAIH,iBAAiB,CAACG,GAAlB,GAAwB,IAAxB,GAA+BC,IAAI,CAACC,GAAL,EAAnC,EAA+C;AAC7CxB,IAAAA,YAAY,CAACyB,OAAb,CAAqB,OAArB,EAA8BV,IAAI,CAACA,IAAL,CAAUK,YAAxC;AACApB,IAAAA,YAAY,CAACyB,OAAb,CAAqB,WAArB,EAAkCJ,UAAlC;AACD,GAHD,MAGO;AACLK,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACD;;AACD,SAAOZ,IAAI,CAACA,IAAL,CAAUK,YAAjB;AACD,CAvBD,C,CAyBA;;;AACA,MAAMQ,QAAQ,GAAG,OAAOf,IAAP,EAAaC,IAAb,KAAsB;AACrC,QAAMe,SAAS,GAAG7B,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAlB;AACA,QAAM6B,UAAU,GAAG9B,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAnB;;AACA,MAAI6B,UAAU,IAAID,SAAlB,EAA6B;AAC3B,QAAIC,UAAU,GAAG,IAAb,GAAoBP,IAAI,CAACC,GAAL,EAAxB,EAAoC;AAClCE,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA7B,MAAAA,QAAQ;AACT,KAHD,MAGO;AACL4B,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,aAAO,MAAMf,YAAY,CAACC,IAAD,EAAOC,IAAP,CAAzB;AACD;AACF,GARD,MAQO;AACL;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,WAAO,MAAMf,YAAY,CAACC,IAAD,EAAOC,IAAP,CAAzB;AACD;AACF,CAhBD;;AAkBA,eAAec,QAAf","sourcesContent":["import api from \"../api/axios\";\r\nimport jwt_decode from \"jwt-decode\";\r\n// Set all future requests to use the token.\r\nconst setToken = () => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (token) {\r\n    api.interceptors.request.use(\r\n      async (config) => {\r\n        config.headers = {\r\n          Authorization: `Bearer ${token}`,\r\n          \"Content-Type\": \"application/json\",\r\n          useCredentials: true,\r\n        };\r\n        return config;\r\n      },\r\n      (error) => {\r\n        Promise.reject(error);\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\n// Get new Token by API CALL.\r\nconst tokenAPICALL = async (user, pass) => {\r\n  const { data } = await api.post(\r\n    `/login`,\r\n    {\r\n      username: user,\r\n      password: pass,\r\n    },\r\n    {\r\n      headers: {\r\n        \"Content-Type\": \"application/json; charset=UTF-8\",\r\n      },\r\n    }\r\n  );\r\n  const jwt_Token_decoded = jwt_decode(data.data.access_token);\r\n\r\n  const expiryDate = jwt_Token_decoded.exp;\r\n  if (jwt_Token_decoded.exp * 1000 > Date.now()) {\r\n    localStorage.setItem(\"token\", data.data.access_token);\r\n    localStorage.setItem(\"token_exp\", expiryDate);\r\n  } else {\r\n    console.log(\"failed token\");\r\n  }\r\n  return data.data.access_token;\r\n};\r\n\r\n// Check the Token stored in Cookies.\r\nconst getToken = async (user, pass) => {\r\n  const storedJwt = localStorage.getItem(\"token\");\r\n  const expiration = localStorage.getItem(\"token_exp\");\r\n  if (expiration && storedJwt) {\r\n    if (expiration * 1000 > Date.now()) {\r\n      console.log(\"Keep Token\");\r\n      setToken();\r\n    } else {\r\n      console.log(\"Expired Token\");\r\n      return await tokenAPICALL(user, pass);\r\n    }\r\n  } else {\r\n    // No token recorder in session, Get new token\r\n    console.log(\"No Token\");\r\n    return await tokenAPICALL(user, pass);\r\n  }\r\n};\r\n\r\nexport default getToken;\r\n\r\n"]},"metadata":{},"sourceType":"module"}