{"ast":null,"code":"import api from \"../api/axios\"; //This function is asynchronous and always returns the result of the call\n//If Search contains anything, Search users is called, else Get All is called\n\nconst getModel_Has_Roles = async (pageNo, pageSize, search) => {\n  let res;\n\n  if (search.length === 0) {\n    res = await getAllModel_Has_Roles(pageNo + 1, pageSize);\n  } else {\n    try {\n      res = await searchModel_Has_Roles(pageNo + 1, pageSize, search);\n    } catch (err) {\n      return {\n        data: [],\n        total: 0\n      };\n    }\n  }\n\n  if (res && res.data && res.data.data && res.data.data.data && res.data.data.data.length > 0) {\n    return res.data.data;\n  } else {\n    return {\n      data: [],\n      total: 0\n    };\n  }\n};\n\nconst addModel_Has_Roles = data => {\n  return api.post(`/model_has_roles`, data);\n};\n\nconst updateModel_Has_Roles = (role_id, model_type, model_id, data) => {\n  return api.put(`/model_has_roles/${role_id}/${model_type}/${model_id}`, data);\n};\n\nconst getAllModel_Has_Roles = (page, paginator) => {\n  return api.get(`/model_has_roles/?page=${page}&paginator=${paginator}`);\n};\n\nconst getOneModel_Has_Roles = (role_id, model_type, model_id) => {\n  return api.get(`/model_has_roles/${role_id}/${model_type}/${model_id}`);\n};\n\nconst searchModel_Has_Roles = (page, paginator, searchKey) => {\n  return api.get(`/model_has_roles/search/${searchKey}/?page=${page}&paginator=${paginator}`);\n};\n\nconst deleteModel_Has_Roles = (role_id, model_type, model_id) => {\n  return api.delete(`/model_has_roles/${role_id}/${model_type}/${model_id}`);\n};\n\nexport { getModel_Has_Roles, addModel_Has_Roles, updateModel_Has_Roles, getAllModel_Has_Roles, getOneModel_Has_Roles, searchModel_Has_Roles, deleteModel_Has_Roles };","map":{"version":3,"sources":["C:/xampp/htdocs/projectbus/ReactApp/src/repo/model_has_rolesRepo.js"],"names":["api","getModel_Has_Roles","pageNo","pageSize","search","res","length","getAllModel_Has_Roles","searchModel_Has_Roles","err","data","total","addModel_Has_Roles","post","updateModel_Has_Roles","role_id","model_type","model_id","put","page","paginator","get","getOneModel_Has_Roles","searchKey","deleteModel_Has_Roles","delete"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB,C,CAGA;AACA;;AACA,MAAMC,kBAAkB,GAAG,OAAOC,MAAP,EAAcC,QAAd,EAAuBC,MAAvB,KAAkC;AACzD,MAAIC,GAAJ;;AACA,MAAGD,MAAM,CAACE,MAAP,KAAgB,CAAnB,EAAsB;AAClBD,IAAAA,GAAG,GAAG,MAAME,qBAAqB,CAACL,MAAM,GAAC,CAAR,EAAUC,QAAV,CAAjC;AACH,GAFD,MAII;AACA,QAAI;AACAE,MAAAA,GAAG,GAAG,MAAMG,qBAAqB,CAACN,MAAM,GAAC,CAAR,EAAUC,QAAV,EAAmBC,MAAnB,CAAjC;AACH,KAFD,CAEE,OAAMK,GAAN,EAAW;AACT,aAAO;AACHC,QAAAA,IAAI,EAAC,EADF;AAEHC,QAAAA,KAAK,EAAC;AAFH,OAAP;AAIH;AACJ;;AACD,MACAN,GAAG,IACHA,GAAG,CAACK,IADJ,IAEAL,GAAG,CAACK,IAAJ,CAASA,IAFT,IAGAL,GAAG,CAACK,IAAJ,CAASA,IAAT,CAAcA,IAHd,IAIAL,GAAG,CAACK,IAAJ,CAASA,IAAT,CAAcA,IAAd,CAAmBJ,MAAnB,GAA4B,CAL5B,EAK+B;AAC/B,WAAOD,GAAG,CAACK,IAAJ,CAASA,IAAhB;AACC,GAPD,MAOO;AACH,WAAO;AACHA,MAAAA,IAAI,EAAC,EADF;AAEHC,MAAAA,KAAK,EAAC;AAFH,KAAP;AAIH;AACJ,CA7BD;;AAgCA,MAAMC,kBAAkB,GAAIF,IAAD,IAAU;AACrC,SAAOV,GAAG,CAACa,IAAJ,CAAU,kBAAV,EAA4BH,IAA5B,CAAP;AACC,CAFD;;AAGA,MAAMI,qBAAqB,GAAG,CAACC,OAAD,EAASC,UAAT,EAAoBC,QAApB,EAA6BP,IAA7B,KAAsC;AACpE,SAAOV,GAAG,CAACkB,GAAJ,CAAS,oBAAmBH,OAAQ,IAAGC,UAAW,IAAGC,QAAS,EAA9D,EAAgEP,IAAhE,CAAP;AACC,CAFD;;AAGA,MAAMH,qBAAqB,GAAG,CAACY,IAAD,EAAMC,SAAN,KAAoB;AAClD,SAAOpB,GAAG,CAACqB,GAAJ,CAAS,0BAAyBF,IAAK,cAAaC,SAAU,EAA9D,CAAP;AACC,CAFD;;AAGA,MAAME,qBAAqB,GAAG,CAACP,OAAD,EAASC,UAAT,EAAoBC,QAApB,KAAiC;AAC/D,SAAOjB,GAAG,CAACqB,GAAJ,CAAS,oBAAmBN,OAAQ,IAAGC,UAAW,IAAGC,QAAS,EAA9D,CAAP;AACC,CAFD;;AAGA,MAAMT,qBAAqB,GAAG,CAACW,IAAD,EAAMC,SAAN,EAAgBG,SAAhB,KAA8B;AAC5D,SAAOvB,GAAG,CAACqB,GAAJ,CAAS,2BAA0BE,SAAU,UAASJ,IAAK,cAAaC,SAAU,EAAlF,CAAP;AACC,CAFD;;AAGA,MAAMI,qBAAqB,GAAG,CAACT,OAAD,EAASC,UAAT,EAAoBC,QAApB,KAAiC;AAC/D,SAAOjB,GAAG,CAACyB,MAAJ,CAAY,oBAAmBV,OAAQ,IAAGC,UAAW,IAAGC,QAAS,EAAjE,CAAP;AACC,CAFD;;AAGA,SAAQhB,kBAAR,EAA2BW,kBAA3B,EAA8CE,qBAA9C,EAAoEP,qBAApE,EAA0Fe,qBAA1F,EAAgHd,qBAAhH,EAAsIgB,qBAAtI","sourcesContent":["import api from \"../api/axios\";\r\n\r\n\r\n//This function is asynchronous and always returns the result of the call\r\n//If Search contains anything, Search users is called, else Get All is called\r\nconst getModel_Has_Roles = async (pageNo,pageSize,search) => {\r\n    let res;\r\n    if(search.length===0) {\r\n        res = await getAllModel_Has_Roles(pageNo+1,pageSize);\r\n    }\r\n\r\n    else{\r\n        try {\r\n            res = await searchModel_Has_Roles(pageNo+1,pageSize,search);\r\n        } catch(err) {\r\n            return {\r\n                data:[],\r\n                total:0\r\n            }\r\n        }\r\n    }\r\n    if (\r\n    res &&\r\n    res.data &&\r\n    res.data.data &&\r\n    res.data.data.data &&\r\n    res.data.data.data.length > 0) {\r\n    return res.data.data;\r\n    } else {\r\n        return {\r\n            data:[],\r\n            total:0\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst addModel_Has_Roles = (data) => {\r\nreturn api.post(`/model_has_roles`,data)\r\n}\r\nconst updateModel_Has_Roles = (role_id,model_type,model_id,data) => {\r\nreturn api.put(`/model_has_roles/${role_id}/${model_type}/${model_id}`,data)\r\n}\r\nconst getAllModel_Has_Roles = (page,paginator) => {\r\nreturn api.get(`/model_has_roles/?page=${page}&paginator=${paginator}`)\r\n}\r\nconst getOneModel_Has_Roles = (role_id,model_type,model_id) => {\r\nreturn api.get(`/model_has_roles/${role_id}/${model_type}/${model_id}`)\r\n}\r\nconst searchModel_Has_Roles = (page,paginator,searchKey) => {\r\nreturn api.get(`/model_has_roles/search/${searchKey}/?page=${page}&paginator=${paginator}`)\r\n}\r\nconst deleteModel_Has_Roles = (role_id,model_type,model_id) => {\r\nreturn api.delete(`/model_has_roles/${role_id}/${model_type}/${model_id}`)\r\n}\r\nexport {getModel_Has_Roles,addModel_Has_Roles,updateModel_Has_Roles,getAllModel_Has_Roles,getOneModel_Has_Roles,searchModel_Has_Roles,deleteModel_Has_Roles}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}