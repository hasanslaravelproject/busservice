{"ast":null,"code":"import api from \"../api/axios\"; //This function is asynchronous and always returns the result of the call\n//If Search contains anything, Search users is called, else Get All is called\n\nconst getServices = async (pageNo, pageSize, search) => {\n  let res;\n\n  if (search.length === 0) {\n    res = await getAllServices(pageNo + 1, pageSize);\n  } else {\n    try {\n      res = await searchServices(pageNo + 1, pageSize, search);\n    } catch (err) {\n      return {\n        data: [],\n        total: 0\n      };\n    }\n  }\n\n  if (res && res.data && res.data.data && res.data.data.data && res.data.data.data.length > 0) {\n    return res.data.data;\n  } else {\n    return {\n      data: [],\n      total: 0\n    };\n  }\n};\n\nconst addServices = data => {\n  return api.post(`/services`, data);\n};\n\nconst updateServices = (id, data) => {\n  return api.put(`/services/${id}`, data);\n};\n\nconst getAllServices = (page, paginator) => {\n  return api.get(`/services/?page=${page}&paginator=${paginator}`);\n};\n\nconst getOneServices = id => {\n  return api.get(`/services/${id}`);\n};\n\nconst searchServices = (page, paginator, searchKey) => {\n  return api.get(`/services/search/${searchKey}/?page=${page}&paginator=${paginator}`);\n};\n\nconst deleteServices = id => {\n  return api.delete(`/services/${id}`);\n};\n\nexport { getServices, addServices, updateServices, getAllServices, getOneServices, searchServices, deleteServices };","map":{"version":3,"sources":["C:/xampp/htdocs/projectbus/ReactApp/src/repo/servicesRepo.js"],"names":["api","getServices","pageNo","pageSize","search","res","length","getAllServices","searchServices","err","data","total","addServices","post","updateServices","id","put","page","paginator","get","getOneServices","searchKey","deleteServices","delete"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB,C,CAGA;AACA;;AACA,MAAMC,WAAW,GAAG,OAAOC,MAAP,EAAcC,QAAd,EAAuBC,MAAvB,KAAkC;AAClD,MAAIC,GAAJ;;AACA,MAAGD,MAAM,CAACE,MAAP,KAAgB,CAAnB,EAAsB;AAClBD,IAAAA,GAAG,GAAG,MAAME,cAAc,CAACL,MAAM,GAAC,CAAR,EAAUC,QAAV,CAA1B;AACH,GAFD,MAII;AACA,QAAI;AACAE,MAAAA,GAAG,GAAG,MAAMG,cAAc,CAACN,MAAM,GAAC,CAAR,EAAUC,QAAV,EAAmBC,MAAnB,CAA1B;AACH,KAFD,CAEE,OAAMK,GAAN,EAAW;AACT,aAAO;AACHC,QAAAA,IAAI,EAAC,EADF;AAEHC,QAAAA,KAAK,EAAC;AAFH,OAAP;AAIH;AACJ;;AACD,MACAN,GAAG,IACHA,GAAG,CAACK,IADJ,IAEAL,GAAG,CAACK,IAAJ,CAASA,IAFT,IAGAL,GAAG,CAACK,IAAJ,CAASA,IAAT,CAAcA,IAHd,IAIAL,GAAG,CAACK,IAAJ,CAASA,IAAT,CAAcA,IAAd,CAAmBJ,MAAnB,GAA4B,CAL5B,EAK+B;AAC/B,WAAOD,GAAG,CAACK,IAAJ,CAASA,IAAhB;AACC,GAPD,MAOO;AACH,WAAO;AACHA,MAAAA,IAAI,EAAC,EADF;AAEHC,MAAAA,KAAK,EAAC;AAFH,KAAP;AAIH;AACJ,CA7BD;;AAgCA,MAAMC,WAAW,GAAIF,IAAD,IAAU;AAC9B,SAAOV,GAAG,CAACa,IAAJ,CAAU,WAAV,EAAqBH,IAArB,CAAP;AACC,CAFD;;AAGA,MAAMI,cAAc,GAAG,CAACC,EAAD,EAAIL,IAAJ,KAAa;AACpC,SAAOV,GAAG,CAACgB,GAAJ,CAAS,aAAYD,EAAG,EAAxB,EAA0BL,IAA1B,CAAP;AACC,CAFD;;AAGA,MAAMH,cAAc,GAAG,CAACU,IAAD,EAAMC,SAAN,KAAoB;AAC3C,SAAOlB,GAAG,CAACmB,GAAJ,CAAS,mBAAkBF,IAAK,cAAaC,SAAU,EAAvD,CAAP;AACC,CAFD;;AAGA,MAAME,cAAc,GAAIL,EAAD,IAAQ;AAC/B,SAAOf,GAAG,CAACmB,GAAJ,CAAS,aAAYJ,EAAG,EAAxB,CAAP;AACC,CAFD;;AAGA,MAAMP,cAAc,GAAG,CAACS,IAAD,EAAMC,SAAN,EAAgBG,SAAhB,KAA8B;AACrD,SAAOrB,GAAG,CAACmB,GAAJ,CAAS,oBAAmBE,SAAU,UAASJ,IAAK,cAAaC,SAAU,EAA3E,CAAP;AACC,CAFD;;AAGA,MAAMI,cAAc,GAAIP,EAAD,IAAQ;AAC/B,SAAOf,GAAG,CAACuB,MAAJ,CAAY,aAAYR,EAAG,EAA3B,CAAP;AACC,CAFD;;AAGA,SAAQd,WAAR,EAAoBW,WAApB,EAAgCE,cAAhC,EAA+CP,cAA/C,EAA8Da,cAA9D,EAA6EZ,cAA7E,EAA4Fc,cAA5F","sourcesContent":["import api from \"../api/axios\";\r\n\r\n\r\n//This function is asynchronous and always returns the result of the call\r\n//If Search contains anything, Search users is called, else Get All is called\r\nconst getServices = async (pageNo,pageSize,search) => {\r\n    let res;\r\n    if(search.length===0) {\r\n        res = await getAllServices(pageNo+1,pageSize);\r\n    }\r\n\r\n    else{\r\n        try {\r\n            res = await searchServices(pageNo+1,pageSize,search);\r\n        } catch(err) {\r\n            return {\r\n                data:[],\r\n                total:0\r\n            }\r\n        }\r\n    }\r\n    if (\r\n    res &&\r\n    res.data &&\r\n    res.data.data &&\r\n    res.data.data.data &&\r\n    res.data.data.data.length > 0) {\r\n    return res.data.data;\r\n    } else {\r\n        return {\r\n            data:[],\r\n            total:0\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst addServices = (data) => {\r\nreturn api.post(`/services`,data)\r\n}\r\nconst updateServices = (id,data) => {\r\nreturn api.put(`/services/${id}`,data)\r\n}\r\nconst getAllServices = (page,paginator) => {\r\nreturn api.get(`/services/?page=${page}&paginator=${paginator}`)\r\n}\r\nconst getOneServices = (id) => {\r\nreturn api.get(`/services/${id}`)\r\n}\r\nconst searchServices = (page,paginator,searchKey) => {\r\nreturn api.get(`/services/search/${searchKey}/?page=${page}&paginator=${paginator}`)\r\n}\r\nconst deleteServices = (id) => {\r\nreturn api.delete(`/services/${id}`)\r\n}\r\nexport {getServices,addServices,updateServices,getAllServices,getOneServices,searchServices,deleteServices}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}