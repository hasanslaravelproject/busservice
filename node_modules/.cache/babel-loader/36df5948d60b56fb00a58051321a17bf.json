{"ast":null,"code":"import api from \"../api/axios\"; //This function is asynchronous and always returns the result of the call\n//If Search contains anything, Search users is called, else Get All is called\n\nconst getUsers = async (pageNo, pageSize, search) => {\n  let res;\n\n  if (search.length === 0) {\n    res = await getAllUsers(pageNo + 1, pageSize);\n  } else {\n    try {\n      res = await searchUsers(pageNo + 1, pageSize, search);\n    } catch (err) {\n      return {\n        data: [],\n        total: 0\n      };\n    }\n  }\n\n  if (res && res.data && res.data.data && res.data.data.data && res.data.data.data.length > 0) {\n    return res.data.data;\n  } else {\n    return {\n      data: [],\n      total: 0\n    };\n  }\n};\n\nconst addUsers = data => {\n  return api.post(`/users`, data);\n};\n\nconst updateUsers = (id, data) => {\n  return api.put(`/users/${id}`, data);\n};\n\nconst getAllUsers = (page, paginator) => {\n  return api.get(`/users/?page=${page}&paginator=${paginator}`);\n};\n\nconst getOneUsers = id => {\n  return api.get(`/users/${id}`);\n};\n\nconst searchUsers = (page, paginator, searchKey) => {\n  return api.get(`/users/search/${searchKey}/?page=${page}&paginator=${paginator}`);\n};\n\nconst deleteUsers = id => {\n  return api.delete(`/users/${id}`);\n};\n\nexport { getUsers, addUsers, updateUsers, getAllUsers, getOneUsers, searchUsers, deleteUsers };","map":{"version":3,"sources":["C:/xampp/htdocs/projectbus/ReactApp/src/repo/usersRepo.js"],"names":["api","getUsers","pageNo","pageSize","search","res","length","getAllUsers","searchUsers","err","data","total","addUsers","post","updateUsers","id","put","page","paginator","get","getOneUsers","searchKey","deleteUsers","delete"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB,C,CAGA;AACA;;AACA,MAAMC,QAAQ,GAAG,OAAOC,MAAP,EAAcC,QAAd,EAAuBC,MAAvB,KAAkC;AAC/C,MAAIC,GAAJ;;AACA,MAAGD,MAAM,CAACE,MAAP,KAAgB,CAAnB,EAAsB;AAClBD,IAAAA,GAAG,GAAG,MAAME,WAAW,CAACL,MAAM,GAAC,CAAR,EAAUC,QAAV,CAAvB;AACH,GAFD,MAII;AACA,QAAI;AACAE,MAAAA,GAAG,GAAG,MAAMG,WAAW,CAACN,MAAM,GAAC,CAAR,EAAUC,QAAV,EAAmBC,MAAnB,CAAvB;AACH,KAFD,CAEE,OAAMK,GAAN,EAAW;AACT,aAAO;AACHC,QAAAA,IAAI,EAAC,EADF;AAEHC,QAAAA,KAAK,EAAC;AAFH,OAAP;AAIH;AACJ;;AACD,MACAN,GAAG,IACHA,GAAG,CAACK,IADJ,IAEAL,GAAG,CAACK,IAAJ,CAASA,IAFT,IAGAL,GAAG,CAACK,IAAJ,CAASA,IAAT,CAAcA,IAHd,IAIAL,GAAG,CAACK,IAAJ,CAASA,IAAT,CAAcA,IAAd,CAAmBJ,MAAnB,GAA4B,CAL5B,EAK+B;AAC/B,WAAOD,GAAG,CAACK,IAAJ,CAASA,IAAhB;AACC,GAPD,MAOO;AACH,WAAO;AACHA,MAAAA,IAAI,EAAC,EADF;AAEHC,MAAAA,KAAK,EAAC;AAFH,KAAP;AAIH;AACJ,CA7BD;;AAgCA,MAAMC,QAAQ,GAAIF,IAAD,IAAU;AAC3B,SAAOV,GAAG,CAACa,IAAJ,CAAU,QAAV,EAAkBH,IAAlB,CAAP;AACC,CAFD;;AAGA,MAAMI,WAAW,GAAG,CAACC,EAAD,EAAIL,IAAJ,KAAa;AACjC,SAAOV,GAAG,CAACgB,GAAJ,CAAS,UAASD,EAAG,EAArB,EAAuBL,IAAvB,CAAP;AACC,CAFD;;AAGA,MAAMH,WAAW,GAAG,CAACU,IAAD,EAAMC,SAAN,KAAoB;AACxC,SAAOlB,GAAG,CAACmB,GAAJ,CAAS,gBAAeF,IAAK,cAAaC,SAAU,EAApD,CAAP;AACC,CAFD;;AAGA,MAAME,WAAW,GAAIL,EAAD,IAAQ;AAC5B,SAAOf,GAAG,CAACmB,GAAJ,CAAS,UAASJ,EAAG,EAArB,CAAP;AACC,CAFD;;AAGA,MAAMP,WAAW,GAAG,CAACS,IAAD,EAAMC,SAAN,EAAgBG,SAAhB,KAA8B;AAClD,SAAOrB,GAAG,CAACmB,GAAJ,CAAS,iBAAgBE,SAAU,UAASJ,IAAK,cAAaC,SAAU,EAAxE,CAAP;AACC,CAFD;;AAGA,MAAMI,WAAW,GAAIP,EAAD,IAAQ;AAC5B,SAAOf,GAAG,CAACuB,MAAJ,CAAY,UAASR,EAAG,EAAxB,CAAP;AACC,CAFD;;AAGA,SAAQd,QAAR,EAAiBW,QAAjB,EAA0BE,WAA1B,EAAsCP,WAAtC,EAAkDa,WAAlD,EAA8DZ,WAA9D,EAA0Ec,WAA1E","sourcesContent":["import api from \"../api/axios\";\r\n\r\n\r\n//This function is asynchronous and always returns the result of the call\r\n//If Search contains anything, Search users is called, else Get All is called\r\nconst getUsers = async (pageNo,pageSize,search) => {\r\n    let res;\r\n    if(search.length===0) {\r\n        res = await getAllUsers(pageNo+1,pageSize);\r\n    }\r\n\r\n    else{\r\n        try {\r\n            res = await searchUsers(pageNo+1,pageSize,search);\r\n        } catch(err) {\r\n            return {\r\n                data:[],\r\n                total:0\r\n            }\r\n        }\r\n    }\r\n    if (\r\n    res &&\r\n    res.data &&\r\n    res.data.data &&\r\n    res.data.data.data &&\r\n    res.data.data.data.length > 0) {\r\n    return res.data.data;\r\n    } else {\r\n        return {\r\n            data:[],\r\n            total:0\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst addUsers = (data) => {\r\nreturn api.post(`/users`,data)\r\n}\r\nconst updateUsers = (id,data) => {\r\nreturn api.put(`/users/${id}`,data)\r\n}\r\nconst getAllUsers = (page,paginator) => {\r\nreturn api.get(`/users/?page=${page}&paginator=${paginator}`)\r\n}\r\nconst getOneUsers = (id) => {\r\nreturn api.get(`/users/${id}`)\r\n}\r\nconst searchUsers = (page,paginator,searchKey) => {\r\nreturn api.get(`/users/search/${searchKey}/?page=${page}&paginator=${paginator}`)\r\n}\r\nconst deleteUsers = (id) => {\r\nreturn api.delete(`/users/${id}`)\r\n}\r\nexport {getUsers,addUsers,updateUsers,getAllUsers,getOneUsers,searchUsers,deleteUsers}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}