{"ast":null,"code":"import api from \"../api/axios\"; //This function is asynchronous and always returns the result of the call\n//If Search contains anything, Search users is called, else Get All is called\n\nconst getBus_Categories = async (pageNo, pageSize, search) => {\n  let res;\n\n  if (search.length === 0) {\n    res = await getAllBus_Categories(pageNo + 1, pageSize);\n  } else {\n    try {\n      res = await searchBus_Categories(pageNo + 1, pageSize, search);\n    } catch (err) {\n      return {\n        data: [],\n        total: 0\n      };\n    }\n  }\n\n  if (res && res.data && res.data.data && res.data.data.data && res.data.data.data.length > 0) {\n    return res.data.data;\n  } else {\n    return {\n      data: [],\n      total: 0\n    };\n  }\n};\n\nconst addBus_Categories = data => {\n  return api.post(`/bus_categories`, data);\n};\n\nconst updateBus_Categories = (id, data) => {\n  return api.put(`/bus_categories/${id}`, data);\n};\n\nconst getAllBus_Categories = (page, paginator) => {\n  return api.get(`/bus_categories/?page=${page}&paginator=${paginator}`);\n};\n\nconst getOneBus_Categories = id => {\n  return api.get(`/bus_categories/${id}`);\n};\n\nconst searchBus_Categories = (page, paginator, searchKey) => {\n  return api.get(`/bus_categories/search/${searchKey}/?page=${page}&paginator=${paginator}`);\n};\n\nconst deleteBus_Categories = id => {\n  return api.delete(`/bus_categories/${id}`);\n};\n\nexport { getBus_Categories, addBus_Categories, updateBus_Categories, getAllBus_Categories, getOneBus_Categories, searchBus_Categories, deleteBus_Categories };","map":{"version":3,"sources":["C:/xampp/htdocs/projectbus/ReactApp/src/repo/bus_categoriesRepo.js"],"names":["api","getBus_Categories","pageNo","pageSize","search","res","length","getAllBus_Categories","searchBus_Categories","err","data","total","addBus_Categories","post","updateBus_Categories","id","put","page","paginator","get","getOneBus_Categories","searchKey","deleteBus_Categories","delete"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB,C,CAGA;AACA;;AACA,MAAMC,iBAAiB,GAAG,OAAOC,MAAP,EAAcC,QAAd,EAAuBC,MAAvB,KAAkC;AACxD,MAAIC,GAAJ;;AACA,MAAGD,MAAM,CAACE,MAAP,KAAgB,CAAnB,EAAsB;AAClBD,IAAAA,GAAG,GAAG,MAAME,oBAAoB,CAACL,MAAM,GAAC,CAAR,EAAUC,QAAV,CAAhC;AACH,GAFD,MAII;AACA,QAAI;AACAE,MAAAA,GAAG,GAAG,MAAMG,oBAAoB,CAACN,MAAM,GAAC,CAAR,EAAUC,QAAV,EAAmBC,MAAnB,CAAhC;AACH,KAFD,CAEE,OAAMK,GAAN,EAAW;AACT,aAAO;AACHC,QAAAA,IAAI,EAAC,EADF;AAEHC,QAAAA,KAAK,EAAC;AAFH,OAAP;AAIH;AACJ;;AACD,MACAN,GAAG,IACHA,GAAG,CAACK,IADJ,IAEAL,GAAG,CAACK,IAAJ,CAASA,IAFT,IAGAL,GAAG,CAACK,IAAJ,CAASA,IAAT,CAAcA,IAHd,IAIAL,GAAG,CAACK,IAAJ,CAASA,IAAT,CAAcA,IAAd,CAAmBJ,MAAnB,GAA4B,CAL5B,EAK+B;AAC/B,WAAOD,GAAG,CAACK,IAAJ,CAASA,IAAhB;AACC,GAPD,MAOO;AACH,WAAO;AACHA,MAAAA,IAAI,EAAC,EADF;AAEHC,MAAAA,KAAK,EAAC;AAFH,KAAP;AAIH;AACJ,CA7BD;;AAgCA,MAAMC,iBAAiB,GAAIF,IAAD,IAAU;AACpC,SAAOV,GAAG,CAACa,IAAJ,CAAU,iBAAV,EAA2BH,IAA3B,CAAP;AACC,CAFD;;AAGA,MAAMI,oBAAoB,GAAG,CAACC,EAAD,EAAIL,IAAJ,KAAa;AAC1C,SAAOV,GAAG,CAACgB,GAAJ,CAAS,mBAAkBD,EAAG,EAA9B,EAAgCL,IAAhC,CAAP;AACC,CAFD;;AAGA,MAAMH,oBAAoB,GAAG,CAACU,IAAD,EAAMC,SAAN,KAAoB;AACjD,SAAOlB,GAAG,CAACmB,GAAJ,CAAS,yBAAwBF,IAAK,cAAaC,SAAU,EAA7D,CAAP;AACC,CAFD;;AAGA,MAAME,oBAAoB,GAAIL,EAAD,IAAQ;AACrC,SAAOf,GAAG,CAACmB,GAAJ,CAAS,mBAAkBJ,EAAG,EAA9B,CAAP;AACC,CAFD;;AAGA,MAAMP,oBAAoB,GAAG,CAACS,IAAD,EAAMC,SAAN,EAAgBG,SAAhB,KAA8B;AAC3D,SAAOrB,GAAG,CAACmB,GAAJ,CAAS,0BAAyBE,SAAU,UAASJ,IAAK,cAAaC,SAAU,EAAjF,CAAP;AACC,CAFD;;AAGA,MAAMI,oBAAoB,GAAIP,EAAD,IAAQ;AACrC,SAAOf,GAAG,CAACuB,MAAJ,CAAY,mBAAkBR,EAAG,EAAjC,CAAP;AACC,CAFD;;AAGA,SAAQd,iBAAR,EAA0BW,iBAA1B,EAA4CE,oBAA5C,EAAiEP,oBAAjE,EAAsFa,oBAAtF,EAA2GZ,oBAA3G,EAAgIc,oBAAhI","sourcesContent":["import api from \"../api/axios\";\r\n\r\n\r\n//This function is asynchronous and always returns the result of the call\r\n//If Search contains anything, Search users is called, else Get All is called\r\nconst getBus_Categories = async (pageNo,pageSize,search) => {\r\n    let res;\r\n    if(search.length===0) {\r\n        res = await getAllBus_Categories(pageNo+1,pageSize);\r\n    }\r\n\r\n    else{\r\n        try {\r\n            res = await searchBus_Categories(pageNo+1,pageSize,search);\r\n        } catch(err) {\r\n            return {\r\n                data:[],\r\n                total:0\r\n            }\r\n        }\r\n    }\r\n    if (\r\n    res &&\r\n    res.data &&\r\n    res.data.data &&\r\n    res.data.data.data &&\r\n    res.data.data.data.length > 0) {\r\n    return res.data.data;\r\n    } else {\r\n        return {\r\n            data:[],\r\n            total:0\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst addBus_Categories = (data) => {\r\nreturn api.post(`/bus_categories`,data)\r\n}\r\nconst updateBus_Categories = (id,data) => {\r\nreturn api.put(`/bus_categories/${id}`,data)\r\n}\r\nconst getAllBus_Categories = (page,paginator) => {\r\nreturn api.get(`/bus_categories/?page=${page}&paginator=${paginator}`)\r\n}\r\nconst getOneBus_Categories = (id) => {\r\nreturn api.get(`/bus_categories/${id}`)\r\n}\r\nconst searchBus_Categories = (page,paginator,searchKey) => {\r\nreturn api.get(`/bus_categories/search/${searchKey}/?page=${page}&paginator=${paginator}`)\r\n}\r\nconst deleteBus_Categories = (id) => {\r\nreturn api.delete(`/bus_categories/${id}`)\r\n}\r\nexport {getBus_Categories,addBus_Categories,updateBus_Categories,getAllBus_Categories,getOneBus_Categories,searchBus_Categories,deleteBus_Categories}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}