{"ast":null,"code":"import api from \"../api/axios\"; //This function is asynchronous and always returns the result of the call\n//If Search contains anything, Search users is called, else Get All is called\n\nconst getRole_Has_Permissions = async (pageNo, pageSize, search) => {\n  let res;\n\n  if (search.length === 0) {\n    res = await getAllRole_Has_Permissions(pageNo + 1, pageSize);\n  } else {\n    try {\n      res = await searchRole_Has_Permissions(pageNo + 1, pageSize, search);\n    } catch (err) {\n      return {\n        data: [],\n        total: 0\n      };\n    }\n  }\n\n  if (res && res.data && res.data.data && res.data.data.data && res.data.data.data.length > 0) {\n    return res.data.data;\n  } else {\n    return {\n      data: [],\n      total: 0\n    };\n  }\n};\n\nconst addRole_Has_Permissions = data => {\n  return api.post(`/role_has_permissions`, data);\n};\n\nconst updateRole_Has_Permissions = (permission_id, role_id, data) => {\n  return api.put(`/role_has_permissions/${permission_id}/${role_id}`, data);\n};\n\nconst getAllRole_Has_Permissions = (page, paginator) => {\n  return api.get(`/role_has_permissions/?page=${page}&paginator=${paginator}`);\n};\n\nconst getOneRole_Has_Permissions = (permission_id, role_id) => {\n  return api.get(`/role_has_permissions/${permission_id}/${role_id}`);\n};\n\nconst searchRole_Has_Permissions = (page, paginator, searchKey) => {\n  return api.get(`/role_has_permissions/search/${searchKey}/?page=${page}&paginator=${paginator}`);\n};\n\nconst deleteRole_Has_Permissions = (permission_id, role_id) => {\n  return api.delete(`/role_has_permissions/${permission_id}/${role_id}`);\n};\n\nexport { getRole_Has_Permissions, addRole_Has_Permissions, updateRole_Has_Permissions, getAllRole_Has_Permissions, getOneRole_Has_Permissions, searchRole_Has_Permissions, deleteRole_Has_Permissions };","map":{"version":3,"sources":["C:/xampp/htdocs/projectbus/ReactApp/src/repo/role_has_permissionsRepo.js"],"names":["api","getRole_Has_Permissions","pageNo","pageSize","search","res","length","getAllRole_Has_Permissions","searchRole_Has_Permissions","err","data","total","addRole_Has_Permissions","post","updateRole_Has_Permissions","permission_id","role_id","put","page","paginator","get","getOneRole_Has_Permissions","searchKey","deleteRole_Has_Permissions","delete"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB,C,CAGA;AACA;;AACA,MAAMC,uBAAuB,GAAG,OAAOC,MAAP,EAAcC,QAAd,EAAuBC,MAAvB,KAAkC;AAC9D,MAAIC,GAAJ;;AACA,MAAGD,MAAM,CAACE,MAAP,KAAgB,CAAnB,EAAsB;AAClBD,IAAAA,GAAG,GAAG,MAAME,0BAA0B,CAACL,MAAM,GAAC,CAAR,EAAUC,QAAV,CAAtC;AACH,GAFD,MAII;AACA,QAAI;AACAE,MAAAA,GAAG,GAAG,MAAMG,0BAA0B,CAACN,MAAM,GAAC,CAAR,EAAUC,QAAV,EAAmBC,MAAnB,CAAtC;AACH,KAFD,CAEE,OAAMK,GAAN,EAAW;AACT,aAAO;AACHC,QAAAA,IAAI,EAAC,EADF;AAEHC,QAAAA,KAAK,EAAC;AAFH,OAAP;AAIH;AACJ;;AACD,MACAN,GAAG,IACHA,GAAG,CAACK,IADJ,IAEAL,GAAG,CAACK,IAAJ,CAASA,IAFT,IAGAL,GAAG,CAACK,IAAJ,CAASA,IAAT,CAAcA,IAHd,IAIAL,GAAG,CAACK,IAAJ,CAASA,IAAT,CAAcA,IAAd,CAAmBJ,MAAnB,GAA4B,CAL5B,EAK+B;AAC/B,WAAOD,GAAG,CAACK,IAAJ,CAASA,IAAhB;AACC,GAPD,MAOO;AACH,WAAO;AACHA,MAAAA,IAAI,EAAC,EADF;AAEHC,MAAAA,KAAK,EAAC;AAFH,KAAP;AAIH;AACJ,CA7BD;;AAgCA,MAAMC,uBAAuB,GAAIF,IAAD,IAAU;AAC1C,SAAOV,GAAG,CAACa,IAAJ,CAAU,uBAAV,EAAiCH,IAAjC,CAAP;AACC,CAFD;;AAGA,MAAMI,0BAA0B,GAAG,CAACC,aAAD,EAAeC,OAAf,EAAuBN,IAAvB,KAAgC;AACnE,SAAOV,GAAG,CAACiB,GAAJ,CAAS,yBAAwBF,aAAc,IAAGC,OAAQ,EAA1D,EAA4DN,IAA5D,CAAP;AACC,CAFD;;AAGA,MAAMH,0BAA0B,GAAG,CAACW,IAAD,EAAMC,SAAN,KAAoB;AACvD,SAAOnB,GAAG,CAACoB,GAAJ,CAAS,+BAA8BF,IAAK,cAAaC,SAAU,EAAnE,CAAP;AACC,CAFD;;AAGA,MAAME,0BAA0B,GAAG,CAACN,aAAD,EAAeC,OAAf,KAA2B;AAC9D,SAAOhB,GAAG,CAACoB,GAAJ,CAAS,yBAAwBL,aAAc,IAAGC,OAAQ,EAA1D,CAAP;AACC,CAFD;;AAGA,MAAMR,0BAA0B,GAAG,CAACU,IAAD,EAAMC,SAAN,EAAgBG,SAAhB,KAA8B;AACjE,SAAOtB,GAAG,CAACoB,GAAJ,CAAS,gCAA+BE,SAAU,UAASJ,IAAK,cAAaC,SAAU,EAAvF,CAAP;AACC,CAFD;;AAGA,MAAMI,0BAA0B,GAAG,CAACR,aAAD,EAAeC,OAAf,KAA2B;AAC9D,SAAOhB,GAAG,CAACwB,MAAJ,CAAY,yBAAwBT,aAAc,IAAGC,OAAQ,EAA7D,CAAP;AACC,CAFD;;AAGA,SAAQf,uBAAR,EAAgCW,uBAAhC,EAAwDE,0BAAxD,EAAmFP,0BAAnF,EAA8Gc,0BAA9G,EAAyIb,0BAAzI,EAAoKe,0BAApK","sourcesContent":["import api from \"../api/axios\";\r\n\r\n\r\n//This function is asynchronous and always returns the result of the call\r\n//If Search contains anything, Search users is called, else Get All is called\r\nconst getRole_Has_Permissions = async (pageNo,pageSize,search) => {\r\n    let res;\r\n    if(search.length===0) {\r\n        res = await getAllRole_Has_Permissions(pageNo+1,pageSize);\r\n    }\r\n\r\n    else{\r\n        try {\r\n            res = await searchRole_Has_Permissions(pageNo+1,pageSize,search);\r\n        } catch(err) {\r\n            return {\r\n                data:[],\r\n                total:0\r\n            }\r\n        }\r\n    }\r\n    if (\r\n    res &&\r\n    res.data &&\r\n    res.data.data &&\r\n    res.data.data.data &&\r\n    res.data.data.data.length > 0) {\r\n    return res.data.data;\r\n    } else {\r\n        return {\r\n            data:[],\r\n            total:0\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst addRole_Has_Permissions = (data) => {\r\nreturn api.post(`/role_has_permissions`,data)\r\n}\r\nconst updateRole_Has_Permissions = (permission_id,role_id,data) => {\r\nreturn api.put(`/role_has_permissions/${permission_id}/${role_id}`,data)\r\n}\r\nconst getAllRole_Has_Permissions = (page,paginator) => {\r\nreturn api.get(`/role_has_permissions/?page=${page}&paginator=${paginator}`)\r\n}\r\nconst getOneRole_Has_Permissions = (permission_id,role_id) => {\r\nreturn api.get(`/role_has_permissions/${permission_id}/${role_id}`)\r\n}\r\nconst searchRole_Has_Permissions = (page,paginator,searchKey) => {\r\nreturn api.get(`/role_has_permissions/search/${searchKey}/?page=${page}&paginator=${paginator}`)\r\n}\r\nconst deleteRole_Has_Permissions = (permission_id,role_id) => {\r\nreturn api.delete(`/role_has_permissions/${permission_id}/${role_id}`)\r\n}\r\nexport {getRole_Has_Permissions,addRole_Has_Permissions,updateRole_Has_Permissions,getAllRole_Has_Permissions,getOneRole_Has_Permissions,searchRole_Has_Permissions,deleteRole_Has_Permissions}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}