{"ast":null,"code":"import api from \"../api/axios\"; //This function is asynchronous and always returns the result of the call\n//If Search contains anything, Search users is called, else Get All is called\n\nconst getPassword_Resets = async (pageNo, pageSize, search) => {\n  let res;\n\n  if (search.length === 0) {\n    res = await getAllPassword_Resets(pageNo + 1, pageSize);\n  } else {\n    try {\n      res = await searchPassword_Resets(pageNo + 1, pageSize, search);\n    } catch (err) {\n      return {\n        data: [],\n        total: 0\n      };\n    }\n  }\n\n  if (res && res.data && res.data.data && res.data.data.data && res.data.data.data.length > 0) {\n    return res.data.data;\n  } else {\n    return {\n      data: [],\n      total: 0\n    };\n  }\n};\n\nconst addPassword_Resets = data => {\n  return api.post(`/password_resets`, data);\n};\n\nconst updatePassword_Resets = (email, data) => {\n  return api.put(`/password_resets/${email}`, data);\n};\n\nconst getAllPassword_Resets = (page, paginator) => {\n  return api.get(`/password_resets/?page=${page}&paginator=${paginator}`);\n};\n\nconst getOnePassword_Resets = email => {\n  return api.get(`/password_resets/${email}`);\n};\n\nconst searchPassword_Resets = (page, paginator, searchKey) => {\n  return api.get(`/password_resets/search/${searchKey}/?page=${page}&paginator=${paginator}`);\n};\n\nconst deletePassword_Resets = email => {\n  return api.delete(`/password_resets/${email}`);\n};\n\nexport { getPassword_Resets, addPassword_Resets, updatePassword_Resets, getAllPassword_Resets, getOnePassword_Resets, searchPassword_Resets, deletePassword_Resets };","map":{"version":3,"sources":["C:/xampp/htdocs/projectbus/ReactApp/src/repo/password_resetsRepo.js"],"names":["api","getPassword_Resets","pageNo","pageSize","search","res","length","getAllPassword_Resets","searchPassword_Resets","err","data","total","addPassword_Resets","post","updatePassword_Resets","email","put","page","paginator","get","getOnePassword_Resets","searchKey","deletePassword_Resets","delete"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB,C,CAGA;AACA;;AACA,MAAMC,kBAAkB,GAAG,OAAOC,MAAP,EAAcC,QAAd,EAAuBC,MAAvB,KAAkC;AACzD,MAAIC,GAAJ;;AACA,MAAGD,MAAM,CAACE,MAAP,KAAgB,CAAnB,EAAsB;AAClBD,IAAAA,GAAG,GAAG,MAAME,qBAAqB,CAACL,MAAM,GAAC,CAAR,EAAUC,QAAV,CAAjC;AACH,GAFD,MAII;AACA,QAAI;AACAE,MAAAA,GAAG,GAAG,MAAMG,qBAAqB,CAACN,MAAM,GAAC,CAAR,EAAUC,QAAV,EAAmBC,MAAnB,CAAjC;AACH,KAFD,CAEE,OAAMK,GAAN,EAAW;AACT,aAAO;AACHC,QAAAA,IAAI,EAAC,EADF;AAEHC,QAAAA,KAAK,EAAC;AAFH,OAAP;AAIH;AACJ;;AACD,MACAN,GAAG,IACHA,GAAG,CAACK,IADJ,IAEAL,GAAG,CAACK,IAAJ,CAASA,IAFT,IAGAL,GAAG,CAACK,IAAJ,CAASA,IAAT,CAAcA,IAHd,IAIAL,GAAG,CAACK,IAAJ,CAASA,IAAT,CAAcA,IAAd,CAAmBJ,MAAnB,GAA4B,CAL5B,EAK+B;AAC/B,WAAOD,GAAG,CAACK,IAAJ,CAASA,IAAhB;AACC,GAPD,MAOO;AACH,WAAO;AACHA,MAAAA,IAAI,EAAC,EADF;AAEHC,MAAAA,KAAK,EAAC;AAFH,KAAP;AAIH;AACJ,CA7BD;;AAgCA,MAAMC,kBAAkB,GAAIF,IAAD,IAAU;AACrC,SAAOV,GAAG,CAACa,IAAJ,CAAU,kBAAV,EAA4BH,IAA5B,CAAP;AACC,CAFD;;AAGA,MAAMI,qBAAqB,GAAG,CAACC,KAAD,EAAOL,IAAP,KAAgB;AAC9C,SAAOV,GAAG,CAACgB,GAAJ,CAAS,oBAAmBD,KAAM,EAAlC,EAAoCL,IAApC,CAAP;AACC,CAFD;;AAGA,MAAMH,qBAAqB,GAAG,CAACU,IAAD,EAAMC,SAAN,KAAoB;AAClD,SAAOlB,GAAG,CAACmB,GAAJ,CAAS,0BAAyBF,IAAK,cAAaC,SAAU,EAA9D,CAAP;AACC,CAFD;;AAGA,MAAME,qBAAqB,GAAIL,KAAD,IAAW;AACzC,SAAOf,GAAG,CAACmB,GAAJ,CAAS,oBAAmBJ,KAAM,EAAlC,CAAP;AACC,CAFD;;AAGA,MAAMP,qBAAqB,GAAG,CAACS,IAAD,EAAMC,SAAN,EAAgBG,SAAhB,KAA8B;AAC5D,SAAOrB,GAAG,CAACmB,GAAJ,CAAS,2BAA0BE,SAAU,UAASJ,IAAK,cAAaC,SAAU,EAAlF,CAAP;AACC,CAFD;;AAGA,MAAMI,qBAAqB,GAAIP,KAAD,IAAW;AACzC,SAAOf,GAAG,CAACuB,MAAJ,CAAY,oBAAmBR,KAAM,EAArC,CAAP;AACC,CAFD;;AAGA,SAAQd,kBAAR,EAA2BW,kBAA3B,EAA8CE,qBAA9C,EAAoEP,qBAApE,EAA0Fa,qBAA1F,EAAgHZ,qBAAhH,EAAsIc,qBAAtI","sourcesContent":["import api from \"../api/axios\";\r\n\r\n\r\n//This function is asynchronous and always returns the result of the call\r\n//If Search contains anything, Search users is called, else Get All is called\r\nconst getPassword_Resets = async (pageNo,pageSize,search) => {\r\n    let res;\r\n    if(search.length===0) {\r\n        res = await getAllPassword_Resets(pageNo+1,pageSize);\r\n    }\r\n\r\n    else{\r\n        try {\r\n            res = await searchPassword_Resets(pageNo+1,pageSize,search);\r\n        } catch(err) {\r\n            return {\r\n                data:[],\r\n                total:0\r\n            }\r\n        }\r\n    }\r\n    if (\r\n    res &&\r\n    res.data &&\r\n    res.data.data &&\r\n    res.data.data.data &&\r\n    res.data.data.data.length > 0) {\r\n    return res.data.data;\r\n    } else {\r\n        return {\r\n            data:[],\r\n            total:0\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst addPassword_Resets = (data) => {\r\nreturn api.post(`/password_resets`,data)\r\n}\r\nconst updatePassword_Resets = (email,data) => {\r\nreturn api.put(`/password_resets/${email}`,data)\r\n}\r\nconst getAllPassword_Resets = (page,paginator) => {\r\nreturn api.get(`/password_resets/?page=${page}&paginator=${paginator}`)\r\n}\r\nconst getOnePassword_Resets = (email) => {\r\nreturn api.get(`/password_resets/${email}`)\r\n}\r\nconst searchPassword_Resets = (page,paginator,searchKey) => {\r\nreturn api.get(`/password_resets/search/${searchKey}/?page=${page}&paginator=${paginator}`)\r\n}\r\nconst deletePassword_Resets = (email) => {\r\nreturn api.delete(`/password_resets/${email}`)\r\n}\r\nexport {getPassword_Resets,addPassword_Resets,updatePassword_Resets,getAllPassword_Resets,getOnePassword_Resets,searchPassword_Resets,deletePassword_Resets}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}